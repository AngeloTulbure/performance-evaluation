%% ANGELO TULBURE - A05

m = 2^32;

a = 1664525;

c = 1013904223;

seed = 521191478;  %seed

emp_distr = rand(10000,1);

%Uniform distribution
N = 10000;   %number of choices
out_lin_congr_gen = zeros(N,1);
out_lin_congr_gen(1) = seed;
for j = 2:N
    out_lin_congr_gen(j) = mod(a*out_lin_congr_gen(j-1)+c,m);
end
out_lin_congr_gen = out_lin_congr_gen ./ m;
fprintf(1, "First sample generated by the Linear Congruent Generator: %g\n", out_lin_congr_gen(1));
fprintf(1, "Second sample generated by the Linear Congruent Generator: %g\n", out_lin_congr_gen(2));
fprintf(1, "Third sample generated by the Linear Congruent Generator: %g\n", out_lin_congr_gen(3));

%Exponential Distribution
N1 = 10000;
lambda = 0.1;
out_exp_distr = -log(out_lin_congr_gen)/lambda;
out_emp_exp = -log(emp_distr)/lambda;
figure(1);
plot(sort(out_exp_distr),[1:N1]/N1, "-", sort(out_emp_exp),[1:N1]/N1, "-");
legend("real", "empirical");
title('Exponential Distribution');
xlim([0 25]);


%Pareto Distribution
N2 = 10000;
alpha = 1.5;
m = 5;
out_pareto = m ./ nthroot(out_lin_congr_gen,alpha);
out_emp_pareto = m ./ nthroot(emp_distr,alpha);
figure(2);
plot(sort(out_pareto),[1:N2]/N2, "-", sort(out_emp_pareto),[1:N2]/N2, "-");
legend("real", "empirical");
title('Pareto Distribution');
xlim([0 25]);

%Erlang distribution
N3 = 2500;
k_erlang = 4;
lambda_erlang = 0.4;
out_erlang = ones(N3,1);
out_emp_erlang = ones(N3,1);

counter = 0;
for j = 1:N3
    for i = 1:k_erlang
        counter = counter + 1;
        out_erlang(j) = out_erlang(j) * out_lin_congr_gen(counter);
    end
end

counter1 = 0;
for j = 1:N3
    for i = 1:k_erlang
        counter1 = counter1 + 1;
        out_emp_erlang(j) = out_emp_erlang(j) * emp_distr(counter1);
    end
end
out_erlang = -log(out_erlang) / lambda_erlang;
out_emp_erlang = -log(out_emp_erlang) / lambda_erlang;
figure(3);
plot(sort(out_erlang),[1:N3]/N3, "-", sort(out_emp_erlang),[1:N3]/N3, "-");
legend("real", "empirical");
title('Erlang Distribution');
xlim([0 25]);

%Hypo-Exponential distribution
N4 = 5000;
l1_hypo = 0.5;
l2_hypo = 0.125;
out_hypo1 = ones(N4,1);
out_hypo2 = ones(N4,1);
out_hypo = zeros(N4,1);

out_emp_hypo1 = ones(N4,1);
out_emp_hypo2 = ones(N4,1);
out_emp_hypo = zeros(N4,1);

for j = 1:N4
    out_hypo(j) = -log(out_lin_congr_gen(2*j-1))/l1_hypo - log(out_lin_congr_gen(2*j))/l2_hypo;
end

for j = 1:N4
    out_emp_hypo(j) = -log(emp_distr(2*j-1))/l1_hypo - log(emp_distr(2*j))/l2_hypo;
end

figure(4);
plot(sort(out_hypo),[1:N4]/N4, "-", sort(out_emp_hypo),[1:N4]/N4, "-");
legend("real", "empirical");
title('Hypo-Exponential Distribution');
xlim([0 25]);

%Hyper-Exponential distribution
N5 = 5000;
l1_hyper = 0.5;
l2_hyper = 0.05;
p1 = 0.55;
p2 = 1-p1;
out_hyper = zeros(N5,1);
out_emp_hyper = zeros(25,1);
for j = 1:N5
    if(out_lin_congr_gen(j*2-1) <= p1)
       out_hyper(j) = -log(out_lin_congr_gen(j*2))/l1_hyper;
    else 
       out_hyper(j) = -log(out_lin_congr_gen(j*2))/l2_hyper;
    end
end

for j = 1:N5
    if(emp_distr(j*2-1) <= p1)
       out_emp_hyper(j) = -log(emp_distr(j*2))/l1_hyper;
    else 
       out_emp_hyper(j) = -log(emp_distr(j*2))/l2_hyper;
    end
end

figure(5);
plot(sort(out_hyper),[1:N5]/N5, "-", sort(out_emp_hyper),[1:N5]/N5, "-");
legend("real", "empirical");
title('Hyper-Exponential Distribution');
xlim([0 25]);

Tot_costN1 = 0;
for i = 1:N1
  if(out_exp_distr(i) <= 10)
      Tot_costN1 = Tot_costN1 + out_exp_distr(i) * 0.01;
  else
      Tot_costN1 = Tot_costN1 + out_exp_distr(i) * 0.02;
  end
end
fprintf(1, "Exponential case - cost for storing 10000 file: %g\n", Tot_costN1);

Tot_costN2= 0;
for i = 1:N2
  if(out_pareto(i) <= 10)
      Tot_costN2 = Tot_costN2 + out_pareto(i) * 0.01;
  else
      Tot_costN2 = Tot_costN2 + out_pareto(i) * 0.02;
  end
end
fprintf(1, "Pareto case - cost for storing 10000 file: %g\n", Tot_costN2);

Tot_costN3= 0;
for i = 1:N3
  if(out_erlang(i) <= 10)
      Tot_costN3 = Tot_costN3 + out_erlang(i) * 0.01;
  else
      Tot_costN3 = Tot_costN3 + out_erlang(i) * 0.02;
  end
end
fprintf(1, "Erlang case - cost for storing 10000 files: %g\n", Tot_costN3);

Tot_costN4= 0;
for i = 1:N4
  if(out_hypo(i) <= 10)
      Tot_costN4 = Tot_costN4 + out_hypo(i) * 0.01;
  else
      Tot_costN4 = Tot_costN4 + out_hypo(i) * 0.02;
  end
end
fprintf(1, "Hypo-exp case - cost for storing 5000 files: %g\n", Tot_costN4);


Tot_costN5= 0;
for i = 1:N5
  if(out_hyper(i) <= 10)
      Tot_costN5 = Tot_costN5 + out_hyper(i) * 0.01;
  else
      Tot_costN5 = Tot_costN5 + out_hyper(i) * 0.02;
  end
end
fprintf(1, "Hyper-exp case - cost for storing 5000 files: %g\n", Tot_costN5);

